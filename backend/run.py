"""
Script para executar o Email Classifier API

Este script facilita a execu√ß√£o do servidor de desenvolvimento
com todas as configura√ß√µes apropriadas.

Usage:
    python run.py                 # Execu√ß√£o padr√£o
    python run.py --port 8080     # Porta customizada
    python run.py --no-reload     # Sem auto-reload
    python run.py --host 0.0.0.0  # Host customizado
"""

import argparse
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio atual ao PYTHONPATH
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def parse_args():
    """Parse argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description="Email Classifier API Server",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python run.py
  python run.py --port 8080
  python run.py --host 127.0.0.1 --no-reload
  python run.py --debug
        """
    )
    
    parser.add_argument(
        "--host", 
        default="0.0.0.0",
        help="Host para bind do servidor (padr√£o: 0.0.0.0)"
    )
    
    parser.add_argument(
        "--port", 
        type=int, 
        default=8000,
        help="Porta para o servidor (padr√£o: 8000)"
    )
    
    parser.add_argument(
        "--no-reload", 
        action="store_true",
        help="Desabilitar auto-reload em desenvolvimento"
    )
    
    parser.add_argument(
        "--debug", 
        action="store_true",
        help="Habilitar modo debug com logs detalhados"
    )
    
    parser.add_argument(
        "--workers", 
        type=int, 
        default=1,
        help="N√∫mero de workers (padr√£o: 1)"
    )
    
    return parser.parse_args()

def check_environment():
    """Verificar se o ambiente est√° configurado corretamente"""
    issues = []
    
    # Verificar arquivo .env
    env_file = current_dir / ".env"
    if not env_file.exists():
        issues.append("‚ö†Ô∏è  Arquivo .env n√£o encontrado (opcional)")
    
    # Verificar depend√™ncias cr√≠ticas
    try:
        import fastapi
        import pydantic
        import PyPDF2
    except ImportError as e:
        issues.append(f"‚ùå Depend√™ncia faltando: {e}")
    
    # Verificar vers√£o do Python
    if sys.version_info < (3, 11):
        issues.append(f"‚ö†Ô∏è  Python {sys.version_info.major}.{sys.version_info.minor} pode ter problemas. Recomendado: Python 3.11+")
    
    return issues

def main():
    """Fun√ß√£o principal"""
    args = parse_args()
    
    # Banner de inicializa√ß√£o
    print("üöÄ" + "="*60)
    print("üöÄ  EMAIL CLASSIFIER API")
    print("üöÄ  Desenvolvido para o desafio AutoU")
    print("üöÄ" + "="*60)
    
    # Verificar ambiente
    issues = check_environment()
    if issues:
        print("\nüìã Verifica√ß√µes do ambiente:")
        for issue in issues:
            print(f"   {issue}")
        print()
    
    # Verificar se conseguimos importar a app
    try:
        from app.main import app
        print("‚úÖ Aplica√ß√£o importada com sucesso!")
    except ImportError as e:
        print(f"‚ùå Erro ao importar aplica√ß√£o: {e}")
        print("üîß Verifique se est√° no diret√≥rio backend e se instalou as depend√™ncias")
        sys.exit(1)
    
    # Configurar log level
    log_level = "debug" if args.debug else "info"
    
    # Informa√ß√µes de startup
    print(f"üåê Servidor: http://{args.host}:{args.port}")
    print(f"üìö Documenta√ß√£o: http://{args.host}:{args.port}/docs")
    print(f"üîÑ Auto-reload: {'Habilitado' if not args.no_reload else 'Desabilitado'}")
    print(f"üìä Log level: {log_level.upper()}")
    print(f"üë• Workers: {args.workers}")
    print()
    
    # Dicas √∫teis
    print("üí° Dicas √∫teis:")
    print(f"   ‚Ä¢ Testar API: curl http://{args.host}:{args.port}/health")
    print(f"   ‚Ä¢ Parar servidor: Ctrl+C")
    if not args.no_reload:
        print(f"   ‚Ä¢ Auto-reload ativo: modifica√ß√µes ser√£o aplicadas automaticamente")
    print()
    
    try:
        import uvicorn
        
        if args.no_reload:
            # Sem reload, podemos passar a app diretamente
            print("‚ÑπÔ∏è  Iniciando servidor sem auto-reload...")
            uvicorn.run(
                app,
                host=args.host,
                port=args.port,
                log_level=log_level,
                workers=args.workers
            )
        else:
            # Com reload, precisamos passar como string
            print("‚ÑπÔ∏è  Iniciando servidor com auto-reload...")
            uvicorn.run(
                "app.main:app",  # String import para auto-reload
                host=args.host,
                port=args.port,
                reload=True,
                log_level=log_level
            )
            
    except KeyboardInterrupt:
        print("\nüõë Servidor interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()